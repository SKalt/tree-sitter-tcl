# Commands covered:  set
#
# Copyright © 1996 Sun Microsystems, Inc.
# Copyright © 1998-1999 Scriptics Corporation.
#

=======
set-1.1: TclCompileSetCmd: missing variable name
======
list [catch {set} msg] $msg
-------
(tcl_script
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (catch_cmd
              (tcl_word (ERROR))
                (bare_word)))))
       (dollar_sub (bare_word)))))

=======
set-1.2: TclCompileSetCmd: simple variable name
=======
set i 10
list [set i] $i
-------
(tcl_script
  (command
    (set_cmd
      (bare_word)
      (integer)))
  (command
    (list_cmd
        (bracket_sub
          (tcl_script
            (command
              (set_cmd
                (bare_word)))))
       (dollar_sub (bare_word)))))

=======
set-1.3: TclCompileSetCmd: error compiling variable name
======
set i 10
catch {set "i"xxx} msg
set msg
-------
(tcl_script
  (command
    (set_cmd
      (bare_word)
      (integer)))
  (command
    (catch_cmd
      (tcl_word
        (command
          (set_cmd
            (quote_word)
            (bare_word))))
        (bare_word)))
  (command
    (set_cmd (bare_word))))

=======
set-1.4: TclCompileSetCmd: simple variable name in quotes
=======
set i 17
list [set "i"] $i
-------
(tcl_script
  (command
    (set_cmd
      (bare_word)
      (integer)))
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (set_cmd
                (quote_word)))))
       (dollar_sub (bare_word)))))

=======
set-1.5: TclCompileSetCmd: simple variable name in braces
=======
set {a simple var} 27
list [set {a simple var}] ${a simple var}
-------
(tcl_script
  (command
    (set_cmd
      (brace_word)
      (integer)))
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (set_cmd (brace_word)))))
      (dollar_sub
        (brace_word)))))


=======
set-1.6: TclCompileSetCmd: simple array variable name
=======
set a(foo) 37
list [set a(foo)] $a(foo)
-------
(tcl_script
  (command
    (set_cmd
      (array_ref
        (bare_word)
        (bare_word))
      (integer)))
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (set_cmd
              (array_ref
                (bare_word)
                (bare_word))))))
      (dollar_sub
        (array_ref
          (bare_word)
          (bare_word))))))
=======
set-1.7: TclCompileSetCmd: non-simple (computed) variable name
=======
set x "i"
set i 77
list [set $x] $i
-------
(tcl_script
  (command
    (set_cmd
      (bare_word)
      (quote_word)))
  (command
    (set_cmd
      (bare_word)
      (integer)))
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (set_cmd
              (dollar_sub
                (bare_word))))))
      (dollar_sub
        (bare_word)))))

=======
set-1.8: TclCompileSetCmd: non-simple (computed) variable name
=======
set x "i"
set i 77
list [set [set x] 2] $i
----
(tcl_script
  (command
    (set_cmd
      (bare_word)
      (quote_word)))
  (command
    (set_cmd
      (bare_word)
      (integer)))
  (command
    (list_cmd
      (bracket_sub
        (tcl_script
          (command
            (set_cmd
              (bracket_sub
                (tcl_script
                  (command
                    (set_cmd
                      (bare_word)))))
              (integer)))))
      (dollar_sub
        (bare_word)))))

=======
set-1.9: TclCompileSetCmd: 3rd arg => assignment
=======
    set i "abcdef"
    list [set i] $i
------
    (tcl_script
      (command
        (set_cmd
          (bare_word)
          (quote_word)))
      (command
        (list_cmd
          (bracket_sub
            (tcl_script
              (command
                (set_cmd
                  (bare_word)))))
          (dollar_sub
            (bare_word)))))
=======
set-1.10: TclCompileSetCmd: only two args => just getting value
=======
    set i {one two}
    set i
-------
    (tcl_script
      (command
        (set_cmd
          (bare_word)
          (brace_word)))
      (command
        (set_cmd
          (bare_word))))


=======
set-1.11: TclCompileSetCmd: simple global name
=======
    proc p {} {
        global i
        set i 54
        set i
    }
    p
-------
    (tcl_script
      (command
        (proc_def_cmd
          (bare_word)
          (brace_word)
          (tcl_word
            (tcl_script
              (command
                (global_cmd
                  (bare_word)))
              (command
                (set_cmd
                  (bare_word)
                  (integer)))
              (command
                (set_cmd
                  (bare_word)))))))
      (command
        (proc_call_cmd
          (bare_word))))

=======
set-1.12: TclCompileSetCmd: simple local name
=======

    proc p {bar} {
        set foo $bar
        set foo
    }
    p 999
-------
    (tcl_script
      (command
        (proc_def_cmd
          (bare_word)
          (brace_word)
          (tcl_word
            (tcl_script
              (command
                (set_cmd
                  (bare_word)
                  (dollar_sub
                    (bare_word))))
              (command
                (set_cmd
                  (bare_word)))))))
      (command
        (proc_call_cmd
          (bare_word)
          (integer))))

=======
set-1.13: TclCompileSetCmd: simple but new (unknown) local name
=======
    proc p {} {
        set bar
    }
    catch {p} msg
    set msg
---------
    (tcl_script
      (command
        (proc_def_cmd
          (bare_word)
          (brace_word)
          (tcl_word
            (tcl_script
              (command
                (set_cmd
                  (bare_word)))))))
      (command
        (catch_cmd
          (tcl_word
            (command
              (proc_call_cmd
                (bare_word))))
          (bare_word)))
      (command
        (set_cmd
          (bare_word))))

=======
set-1.15: TclCompileSetCmd: variable is array
=======
    set x 27
    set x [set a(foo) 11]
    catch {unset a}
    set x
-------
    (tcl_script
      (command
        (set_cmd
          (bare_word)
          (integer)))
      (command
        (set_cmd
          (bare_word)
          (bracket_sub
            (tcl_script
              (command
                (set_cmd
                  (array_ref
                    (bare_word)
                    (bare_word))
                  (integer)))))))
      (command
        (catch_cmd
          (tcl_word
            (command
              (unset_cmd
                (bare_word))))))
      (command
        (set_cmd
          (bare_word))))


=======
set-1.16: TclCompileSetCmd: variable is array, elem substitutions
=======
    set i 5
    set x 789
    set a(foo5) 27
    set x [set a(foo$i)]
    catch {unset a}
    set x
-------
